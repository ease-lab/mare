// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mare

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MareClient is the client API for Mare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MareClient interface {
	MapBatch(ctx context.Context, in *MapBatchRequest, opts ...grpc.CallOption) (*MapBatchResponse, error)
	ReduceBatch(ctx context.Context, in *ReduceBatchRequest, opts ...grpc.CallOption) (*ReduceBatchResponse, error)
}

type mareClient struct {
	cc grpc.ClientConnInterface
}

func NewMareClient(cc grpc.ClientConnInterface) MareClient {
	return &mareClient{cc}
}

func (c *mareClient) MapBatch(ctx context.Context, in *MapBatchRequest, opts ...grpc.CallOption) (*MapBatchResponse, error) {
	out := new(MapBatchResponse)
	err := c.cc.Invoke(ctx, "/mare.Mare/MapBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mareClient) ReduceBatch(ctx context.Context, in *ReduceBatchRequest, opts ...grpc.CallOption) (*ReduceBatchResponse, error) {
	out := new(ReduceBatchResponse)
	err := c.cc.Invoke(ctx, "/mare.Mare/ReduceBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MareServer is the server API for Mare service.
// All implementations must embed UnimplementedMareServer
// for forward compatibility
type MareServer interface {
	MapBatch(context.Context, *MapBatchRequest) (*MapBatchResponse, error)
	ReduceBatch(context.Context, *ReduceBatchRequest) (*ReduceBatchResponse, error)
	mustEmbedUnimplementedMareServer()
}

// UnimplementedMareServer must be embedded to have forward compatible implementations.
type UnimplementedMareServer struct {
}

func (UnimplementedMareServer) MapBatch(context.Context, *MapBatchRequest) (*MapBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapBatch not implemented")
}
func (UnimplementedMareServer) ReduceBatch(context.Context, *ReduceBatchRequest) (*ReduceBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceBatch not implemented")
}
func (UnimplementedMareServer) mustEmbedUnimplementedMareServer() {}

// UnsafeMareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MareServer will
// result in compilation errors.
type UnsafeMareServer interface {
	mustEmbedUnimplementedMareServer()
}

func RegisterMareServer(s grpc.ServiceRegistrar, srv MareServer) {
	s.RegisterService(&_Mare_serviceDesc, srv)
}

func _Mare_MapBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MareServer).MapBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mare.Mare/MapBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MareServer).MapBatch(ctx, req.(*MapBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mare_ReduceBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MareServer).ReduceBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mare.Mare/ReduceBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MareServer).ReduceBatch(ctx, req.(*ReduceBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mare.Mare",
	HandlerType: (*MareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapBatch",
			Handler:    _Mare_MapBatch_Handler,
		},
		{
			MethodName: "ReduceBatch",
			Handler:    _Mare_ReduceBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mare.proto",
}
